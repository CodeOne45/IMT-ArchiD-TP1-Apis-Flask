---
openapi: 3.0.0
info:
  title: User API
  description: This is the API of the User service
  contact:
    email: aman.kumar@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/UE-archi-distribuees/User/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://virtserver.swaggerhub.com/UE-archi-distribuees/Booking/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://virtserver.swaggerhub.com/UE-archi-distribuees/Movie/1.0.0
    description: SwaggerHub API Auto Mocking
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /:
    get:
      tags:
        - developers
      summary: home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Welcome to User service</h1>
  /users:
    get:
      tags:
        - developers
      summary: get the full JSON database
      description: |
        Nothing to do
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllUsers"
  /userbyid/{userid}:
    get:
      tags:
        - developers
      summary: get the users by a user id
      description: |
        By passing in the appropriate options, you can get bookings of a user
      operationId: get_user_by_id
      parameters:
        - name: userid
          in: path
          description: User ID.
          required: true
          style: simple
          explode: false
          schema:
            maximum: 1
            minimum: 1
            type: string
      responses:
        "200":
          description: Users infos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllUsers"
        "400":
          description: bad input parameter

  /users/add:
    post:
      tags:
        - admins
      summary: add a user to db
      description: Adds a user
      operationId: add_user
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingsUser"
        "409":
          description: an existing item already exists
  /users/{userid}:
    delete:
      tags:
        - admins
      summary: delete a user from db
      description: Delete a user from the db
      operationId: delete_user_byid
      parameters:
        - name: userid
          in: path
          description: User ID.
          required: true
          style: simple
          explode: false
          schema:
            maximum: 1
            minimum: 1
            type: string
      responses:
        "200":
          description: User Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllUsers"
        "409":
          description: an existing item already exists
  /users/booking/{userid}:
    post:
      tags:
        - admins
      summary: add a booking for a user
      description: Adds a booking for the user
      operationId: add_booking_byuser
      parameters:
        - name: userid
          in: path
          description: User ID.
          required: true
          style: simple
          explode: false
          schema:
            maximum: 1
            minimum: 1
            type: string
      requestBody:
        description: item to add
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewMovie"
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingsUser"
        "409":
          description: an existing item already exists
    delete:
      tags:
        - admins
      summary: delete a booking for a user
      description: Dellete a booking for the user
      operationId: delete_booking_byuser
      parameters:
        - name: userid
          in: path
          description: User ID.
          required: true
          style: simple
          explode: false
          schema:
            maximum: 1
            minimum: 1
            type: string
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingsUser"
        "409":
          description: an existing item already exists

  /users/movies:
    get:
      tags:
        - developers
      summary: get the full JSON database
      description: |
        Nothing to do
      operationId: get_movies
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieID"

  /users/bookings/{userid}:
    get:
      tags:
        - developers
      summary: get the bookings from a user id
      description: |
        By passing in the appropriate options, you can get bookings of a user
      operationId: get_booking_for_user
      parameters:
        - name: userid
          in: path
          description: User ID.
          required: true
          style: simple
          explode: false
          schema:
            maximum: 1
            minimum: 1
            type: string
      responses:
        "200":
          description: Bookings of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BookingsUser"
        "400":
          description: bad input parameter

  /users/moviebyname/{movieTitle}:
    get:
      tags:
        - developers
      summary: get the movie by title
      description: |
        By passing in the appropriate options, you can get bookings of a user
      operationId: get_movies_for_user
      parameters:
        - name: movieTitle
          in: path
          description: Movie title.
          required: true
          style: simple
          explode: false
          schema:
            maximum: 1
            minimum: 1
            type: string
      responses:
        "200":
          description: Movie by name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MovieItem"
        "400":
          description: bad input parameter

components:
  schemas:
    AllUsers:
      required:
        - id
        - name
        - last_active
      type: object
      properties:
        id:
          type: string
          example: chris_rivers
        name:
          type: string
          example: Chris Rivers
        last_active:
          type: number
          example: 1360031010
    BookingsUser:
      required:
        - dates
        - userid
      type: object
      properties:
        userid:
          type: string
          example: chris_rivers
        dates:
          type: array
          items:
            $ref: "#/components/schemas/DateItem"
    DateItem:
      required:
        - date
        - movies
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movies:
          type: array
          items:
            type: string
            example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6S
    MovieID:
      required:
        - id
        - link
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MovieItem"
    MovieItem:
      required:
        - director
        - rating
        - title
        - price
        - link
      type: object
      properties:
        title:
          type: string
          example: The Martian
        rating:
          type: string
          example: "7"
        director:
          type: string
          example: Paul McGuigan
        price:
          type: string
          example: "9"
        link:
          type: array
          items:
            $ref: "#/components/schemas/LinkItem"
    LinkItem:
      required:
        - self
        - deleteMovie
        - updateMPrice
        - updateMRate
      type: object
      properties:
        self:
          type: string
          example: "href: /movies/<movieid> method: GET"
        deleteMovie:
          type: string
          example: "href: /movies/<movieid> method: DELETE"
        updateMPrice:
          type: string
          example: "href: /movies/<movieid>/<price> method: UPDATE"
        updateMRate:
          type: string
          example: "href: /movies/<movieid>/<rate> method: UPDATE"

    NewMovie:
      required:
        - date
        - movieid
      type: object
      properties:
        date:
          type: string
          example: "20151201"
        movieid:
          type: string
          example: 276c79ec-a26a-40a6-b3d3-fb242a5947b6
    NewUser:
      required:
        - id
        - name
        - last_active
      type: object
      properties:
        id:
          type: string
          example: "chris_rivers"
        name:
          type: string
          example: "Chris Rivers"
        last_active:
          type: number
          example: 1360031010
